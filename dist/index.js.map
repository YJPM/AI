{"version":3,"file":"index.js","mappings":"AACA,IAAIA,GAAgB,EAEbC,eAAeC,IACdF,IAEJG,QAAQC,IAAI,iBA8BhB,WACI,MAAMC,EAAM,83BAgCNC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,YAAcJ,EACpBE,SAASG,KAAKC,YAAYL,EAC9B,CA/DIM,GAmEAT,QAAQC,IAAI,eAKZD,QAAQC,IAAI,gBAhEZJ,GAAgB,EAChBG,QAAQC,IAAI,gBAChB,CAEOH,eAAeY,IACbb,IAELG,QAAQC,IAAI,gBA8DZD,QAAQC,IAAI,gBAKZD,QAAQC,IAAI,eA3DZJ,GAAgB,EAChBG,QAAQC,IAAI,cAChB,CCjCA,IAAIJ,GAAgB,EAEbC,eAAeC,IACdF,IAEJG,QAAQC,IAAI,iBAqBhB,WAEQU,OAAOC,cACPD,OAAOC,YAAYC,GAAG,mBAAoBC,GAC1CH,OAAOC,YAAYC,GAAG,eAAgBE,IAG1Cf,QAAQC,IAAI,eAChB,CA1BIe,GAEAnB,GAAgB,EAChBG,QAAQC,IAAI,gBAChB,CAEOH,eAAeY,IACbb,IAELG,QAAQC,IAAI,gBAmBhB,WAEQU,OAAOC,cACPD,OAAOC,YAAYK,IAAI,mBAAoBH,GAC3CH,OAAOC,YAAYK,IAAI,eAAgBF,IAG3Cf,QAAQC,IAAI,eAChB,CAxBIiB,GAEArB,GAAgB,EAChBG,QAAQC,IAAI,cAChB,CAsBA,SAASa,IACLd,QAAQC,IAAI,mBAERkB,KACAC,GAER,CAEA,SAASL,IACLf,QAAQC,IAAI,mBAEZoB,WAAW,KACHF,KAqBmD,OAApDf,SAASkB,cAAc,0BApBtBF,KAEL,IACP,CAEA,SAASD,IACL,IACI,MAAMI,EAAcnB,SAASkB,cAAc,mBAC3C,IAAKC,EACD,OAAO,EAGX,MAAkB,UADHA,EAAYC,aAAa,UAE5C,CAAE,MAAOC,GAEL,OADAzB,QAAQyB,MAAM,eAAgBA,IACvB,CACX,CACJ,CAMA,SAASL,IACLpB,QAAQC,IAAI,YAEhB,CCrFA,IAAIJ,GAAgB,EAEbC,eAAeC,IACdF,IAEJG,QAAQC,IAAI,cAwBhB,WACI,MAAMyB,EAAkB,CACpBC,SAAS,EACTC,cAAc,EACdC,kBAAkB,EAClBC,WAAY,OACZC,OAAO,EACPC,mBAAmB,EACnBC,eAAgB,SAChBC,cAAe,GACfC,gBAAiB,cACjBC,eAAgB,4BAChBC,gBAAiB,sjBA+BvBC,QAIO3B,OAAO4B,qBACR5B,OAAO4B,mBAAqB,CAAC,GAI5B5B,OAAO4B,mBAAqC,mBAC7C5B,OAAO4B,mBAAqC,iBAAIb,GAGpD1B,QAAQC,IAAI,WAChB,CA9EIuC,GAiFAxC,QAAQC,IAAI,UA5EZJ,GAAgB,EAChBG,QAAQC,IAAI,aAChB,CAEOH,eAAeY,IACbb,IAELG,QAAQC,IAAI,aA0EZD,QAAQC,IAAI,UArEZJ,GAAgB,EAChBG,QAAQC,IAAI,WAChB,CCxBOH,eAAeC,UACZ0C,UACAC,UACAC,IACN3C,QAAQC,IAAI,cAChB,CASO,MAYP,EANe,CACXF,KAAI,EACJW,KAfGZ,uBACG8C,UACAC,UACAC,IACN9C,QAAQC,IAAI,YAChB,EAWI8C,KATgB,CAChBC,GAAI,eACJC,KAAM,OACNC,YAAa,mCAYjBC,EAAErD,gBACQC,a","sources":["webpack://ai-assistant-extension/./src/modules/typing-indicator.js","webpack://ai-assistant-extension/./src/modules/options-generator.js","webpack://ai-assistant-extension/./src/modules/settings.js","webpack://ai-assistant-extension/./src/index.js"],"sourcesContent":["// 打字指示器模块\r\nlet isInitialized = false;\r\n\r\nexport async function init() {\r\n    if (isInitialized) return;\r\n    \r\n    console.log('初始化打字指示器模块...');\r\n    \r\n    // 注入全局样式\r\n    injectGlobalStyles();\r\n    \r\n    // 创建设置UI\r\n    createSettingsUI();\r\n    \r\n    // 监听事件\r\n    setupEventListeners();\r\n    \r\n    isInitialized = true;\r\n    console.log('打字指示器模块初始化完成');\r\n}\r\n\r\nexport async function exit() {\r\n    if (!isInitialized) return;\r\n    \r\n    console.log('退出打字指示器模块...');\r\n    \r\n    // 清理事件监听器\r\n    cleanupEventListeners();\r\n    \r\n    // 移除UI元素\r\n    removeUIElements();\r\n    \r\n    isInitialized = false;\r\n    console.log('打字指示器模块已退出');\r\n}\r\n\r\nfunction injectGlobalStyles() {\r\n    const css = `\r\n        .typing_indicator {\r\n            position: sticky;\r\n            bottom: 10px;\r\n            margin: 10px;\r\n            opacity: 0.85;\r\n            text-shadow: 0px 0px calc(var(--shadowWidth) * 1px) var(--SmartThemeShadowColor);\r\n            order: 9999;\r\n        }\r\n        \r\n        .typing_indicator .svg_dots {\r\n            display: inline-block;\r\n            vertical-align: middle;\r\n            margin-left: 4px;\r\n        }\r\n        \r\n        .typing-ellipsis::after {\r\n            display: inline-block;\r\n            animation: ellipsis-animation 1.4s infinite;\r\n            content: '.';\r\n            width: 1.2em;\r\n            text-align: left;\r\n            vertical-align: bottom;\r\n        }\r\n        \r\n        @keyframes ellipsis-animation {\r\n            0% { content: '.'; }\r\n            33% { content: '..'; }\r\n            66%, 100% { content: '...'; }\r\n        }\r\n    `;\r\n    \r\n    const style = document.createElement('style');\r\n    style.textContent = css;\r\n    document.head.appendChild(style);\r\n}\r\n\r\nfunction createSettingsUI() {\r\n    // 创建设置UI的代码\r\n    console.log('创建打字指示器设置UI');\r\n}\r\n\r\nfunction setupEventListeners() {\r\n    // 设置事件监听器的代码\r\n    console.log('设置打字指示器事件监听器');\r\n}\r\n\r\nfunction cleanupEventListeners() {\r\n    // 清理事件监听器的代码\r\n    console.log('清理打字指示器事件监听器');\r\n}\r\n\r\nfunction removeUIElements() {\r\n    // 移除UI元素的代码\r\n    console.log('移除打字指示器UI元素');\r\n} ","// 选项生成器模块\r\nlet isInitialized = false;\r\n\r\nexport async function init() {\r\n    if (isInitialized) return;\r\n    \r\n    console.log('初始化选项生成器模块...');\r\n    \r\n    // 设置事件监听器\r\n    setupEventListeners();\r\n    \r\n    isInitialized = true;\r\n    console.log('选项生成器模块初始化完成');\r\n}\r\n\r\nexport async function exit() {\r\n    if (!isInitialized) return;\r\n    \r\n    console.log('退出选项生成器模块...');\r\n    \r\n    // 清理事件监听器\r\n    cleanupEventListeners();\r\n    \r\n    isInitialized = false;\r\n    console.log('选项生成器模块已退出');\r\n}\r\n\r\nfunction setupEventListeners() {\r\n    // 监听SillyTavern事件\r\n    if (window.eventSource) {\r\n        window.eventSource.on('GENERATION_ENDED', handleGenerationEnded);\r\n        window.eventSource.on('CHAT_CHANGED', handleChatChanged);\r\n    }\r\n    \r\n    console.log('设置选项生成器事件监听器');\r\n}\r\n\r\nfunction cleanupEventListeners() {\r\n    // 清理事件监听器\r\n    if (window.eventSource) {\r\n        window.eventSource.off('GENERATION_ENDED', handleGenerationEnded);\r\n        window.eventSource.off('CHAT_CHANGED', handleChatChanged);\r\n    }\r\n    \r\n    console.log('清理选项生成器事件监听器');\r\n}\r\n\r\nfunction handleGenerationEnded() {\r\n    console.log('生成结束，检查是否需要生成选项');\r\n    // 检查最后一条消息是否为AI回复\r\n    if (isLastMessageFromAI()) {\r\n        generateOptions();\r\n    }\r\n}\r\n\r\nfunction handleChatChanged() {\r\n    console.log('聊天改变，检查是否需要生成选项');\r\n    // 延迟检查，确保DOM已更新\r\n    setTimeout(() => {\r\n        if (isLastMessageFromAI() && !hasOptionsDisplayed()) {\r\n            generateOptions();\r\n        }\r\n    }, 500);\r\n}\r\n\r\nfunction isLastMessageFromAI() {\r\n    try {\r\n        const lastMessage = document.querySelector('#chat .last_mes');\r\n        if (!lastMessage) {\r\n            return false;\r\n        }\r\n        const isUser = lastMessage.getAttribute('is_user');\r\n        return isUser === 'false';\r\n    } catch (error) {\r\n        console.error('检查最后一条消息时出错:', error);\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction hasOptionsDisplayed() {\r\n    return document.querySelector('.ti-options-container') !== null;\r\n}\r\n\r\nfunction generateOptions() {\r\n    console.log('开始生成选项...');\r\n    // 这里实现选项生成逻辑\r\n} ","// 设置模块\r\nlet isInitialized = false;\r\n\r\nexport async function init() {\r\n    if (isInitialized) return;\r\n    \r\n    console.log('初始化设置模块...');\r\n    \r\n    // 初始化默认设置\r\n    initializeDefaultSettings();\r\n    \r\n    // 创建设置UI\r\n    createSettingsUI();\r\n    \r\n    isInitialized = true;\r\n    console.log('设置模块初始化完成');\r\n}\r\n\r\nexport async function exit() {\r\n    if (!isInitialized) return;\r\n    \r\n    console.log('退出设置模块...');\r\n    \r\n    // 清理设置UI\r\n    cleanupSettingsUI();\r\n    \r\n    isInitialized = false;\r\n    console.log('设置模块已退出');\r\n}\r\n\r\nfunction initializeDefaultSettings() {\r\n    const defaultSettings = {\r\n        enabled: true,\r\n        showCharName: true,\r\n        animationEnabled: true,\r\n        customText: '正在输入',\r\n        debug: false,\r\n        optionsGenEnabled: false,\r\n        optionsApiType: 'openai',\r\n        optionsApiKey: '',\r\n        optionsApiModel: 'gpt-4o-mini',\r\n        optionsBaseUrl: 'https://api.openai.com/v1',\r\n        optionsTemplate: `\r\n# 角色\r\n你是一位拥有顶级创作能力的AI叙事导演。\r\n\r\n# 核心目标\r\n基于完整的聊天上下文，通过一个严谨的内部思考过程，为\"我\"（用户角色）生成3-5个接下来可能发生的、最具戏剧性的行动或事件选项。\r\n\r\n# 当前用户输入\r\n{{user_input}}\r\n\r\n# 角色信息\r\n{{char_card}}\r\n\r\n# 世界设定\r\n{{world_info}}\r\n\r\n# 内部思考过程\r\n1.  **[情境分析]**: 快速分析当前场景、我的情绪和目标、以及当前的冲突点。\r\n2.  **[选项构思]**: 基于分析，在内部构思多个多样化的选项（升级冲突、探索未知、反映内心、意外转折等）。\r\n3.  **[排序与决策]**: 根据戏剧性、角色一致性和叙事推动力，对构思的选项进行排序，将你认为的\"最优选项\"放在第一位。\r\n\r\n# 最终输出格式 (!!!至关重要!!!)\r\n- 你的最终输出必须是一个不换行的单行文本，包含3-5个高质量选项。\r\n- **第一个选项必须是你决策出的最优选项。**\r\n- 每个选项都必须用全角括号【】包裹。\r\n- **绝对禁止**包含任何序号、JSON、思考过程、解释或其他多余字符。\r\n\r\n# 对话上下文\r\n{{context}}\r\n\r\n# 开始执行导演任务，并输出你的最终选项列表：\r\n`.trim()\r\n    };\r\n    \r\n    // 确保扩展设置存在\r\n    if (!window.extension_settings) {\r\n        window.extension_settings = {};\r\n    }\r\n    \r\n    // 初始化扩展设置\r\n    if (!window.extension_settings['typing_indicator']) {\r\n        window.extension_settings['typing_indicator'] = defaultSettings;\r\n    }\r\n    \r\n    console.log('默认设置已初始化');\r\n}\r\n\r\nfunction createSettingsUI() {\r\n    console.log('创建设置UI');\r\n    // 这里实现设置UI的创建逻辑\r\n}\r\n\r\nfunction cleanupSettingsUI() {\r\n    console.log('清理设置UI');\r\n    // 这里实现设置UI的清理逻辑\r\n} ","import { init as typingInit, exit as typingExit } from './modules/typing-indicator';\r\nimport { init as optionsInit, exit as optionsExit } from './modules/options-generator';\r\nimport { init as settingsInit, exit as settingsExit } from './modules/settings';\r\n\r\nexport async function init() {\r\n    await typingInit();\r\n    await optionsInit();\r\n    await settingsInit();\r\n    console.log('AI助手扩展初始化完成');\r\n}\r\n\r\nexport async function exit() {\r\n    await typingExit();\r\n    await optionsExit();\r\n    await settingsExit();\r\n    console.log('AI助手扩展已退出');\r\n}\r\n\r\nexport const info = {\r\n    id: 'AI-Assistant',\r\n    name: 'AI助手',\r\n    description: '为SillyTavern提供打字指示器和智能回复选项生成功能',\r\n};\r\n\r\nconst plugin = {\r\n    init,\r\n    exit,\r\n    info,\r\n};\r\n\r\nexport default plugin;\r\n\r\n// jQuery初始化\r\n$(async () => {\r\n    await init();\r\n}); "],"names":["isInitialized","async","init","console","log","css","style","document","createElement","textContent","head","appendChild","injectGlobalStyles","exit","window","eventSource","on","handleGenerationEnded","handleChatChanged","setupEventListeners","off","cleanupEventListeners","isLastMessageFromAI","generateOptions","setTimeout","querySelector","lastMessage","getAttribute","error","defaultSettings","enabled","showCharName","animationEnabled","customText","debug","optionsGenEnabled","optionsApiType","optionsApiKey","optionsApiModel","optionsBaseUrl","optionsTemplate","trim","extension_settings","initializeDefaultSettings","typingInit","optionsInit","settingsInit","typingExit","optionsExit","settingsExit","info","id","name","description","$"],"sourceRoot":""}